// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Moasher.Persistence;

#nullable disable

namespace Moasher.Persistence.Migrations
{
    [DbContext(typeof(MoasherDbContext))]
    partial class MoasherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence<int>("ERCodeSequence", "dbo");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.Analytic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AnalyzedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AnalyzedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InitiativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InitiativeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("KPIId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KPIName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("InitiativeId");

                    b.HasIndex("KPIId");

                    b.ToTable("Analytics", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.EditRequests.EditRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ActionAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ActionBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(450)")
                        .HasComputedColumnSql("('ER-'+right(replicate('0',(5))+CONVERT([varchar],[CodeInc]),(5)))");

                    b.Property<int>("CodeInc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR dbo.ERCodeSequence");

                    b.Property<string>("Events")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasEvents")
                        .HasColumnType("bit");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RequestedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("EditRequests", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.EditRequests.EditRequestSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EditRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("EditRequestId");

                    b.ToTable("EditRequestSnapshot", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsOrganizer")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Entities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fa564cb-b53a-43e1-a401-017e844418b8"),
                            Code = "VRO",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 11, 13, 20, 35, 59, 624, DateTimeKind.Unspecified).AddTicks(8689), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsOrganizer = true,
                            Name = "مكتب تحقيق الرؤية"
                        });
                });

            modelBuilder.Entity("Moasher.Domain.Entities.EnumType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanBeDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<float?>("LimitFrom")
                        .HasColumnType("real");

                    b.Property<float?>("LimitTo")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EnumTypes", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.Initiative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ActualFinish")
                        .HasColumnType("datetimeoffset");

                    b.Property<float?>("ActualProgress")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset?>("ActualStart")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("ApprovedCost")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("CalculateStatus")
                        .HasColumnType("bit");

                    b.Property<string>("CapexCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeByProgram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ContractsAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("ContributionOnStrategicObjective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal?>("CurrentYearBudget")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("CurrentYearExpenditure")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FundStatusEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FundStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FundStatusStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LatestAnalytics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LatestAnalyticsDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("LevelFourStrategicObjectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LevelFourStrategicObjectiveName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LevelOneStrategicObjectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LevelOneStrategicObjectiveName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LevelThreeStrategicObjectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LevelThreeStrategicObjectiveName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LevelTwoStrategicObjectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LevelTwoStrategicObjectiveName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpexCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("PlannedFinish")
                        .HasColumnType("datetimeoffset");

                    b.Property<float?>("PlannedProgress")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("PlannedStart")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("PortfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PortfolioName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RequiredCost")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StatusEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetSegment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalBudget")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TotalExpenditure")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("UnifiedCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.Property<bool>("VisibleOnDashboard")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("FundStatusEnumId");

                    b.HasIndex("LevelThreeStrategicObjectiveId");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("StatusEnumId");

                    b.ToTable("Initiatives", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeApprovedCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTimeOffset>("ApprovalDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasDeleteRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpdateRequest")
                        .HasColumnType("bit");

                    b.Property<Guid>("InitiativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InitiativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SupportingDocument")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InitiativeId");

                    b.ToTable("InitiativeApprovedCosts", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeBudget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTimeOffset>("ApprovalDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasDeleteRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpdateRequest")
                        .HasColumnType("bit");

                    b.Property<decimal>("InitialAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<Guid>("InitiativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InitiativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SupportingDocument")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InitiativeId");

                    b.ToTable("InitiativeBudgets", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("BalancedExpenditurePlan")
                        .HasColumnType("bit");

                    b.Property<bool>("CalculateAmount")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal?>("CurrentYearExpenditure")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasDeleteRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpdateRequest")
                        .HasColumnType("bit");

                    b.Property<Guid>("InitiativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InitiativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("StatusEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalExpenditure")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("InitiativeId");

                    b.HasIndex("StatusEnumId");

                    b.ToTable("InitiativeContracts", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeDeliverable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ActualFinish")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasDeleteRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpdateRequest")
                        .HasColumnType("bit");

                    b.Property<Guid>("InitiativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InitiativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("PlannedFinish")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SupportingDocument")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InitiativeId");

                    b.ToTable("InitiativeDeliverables", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeExpenditure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ActualAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("HasDeleteRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpdateRequest")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("Month")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("PlannedAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ProjectId");

                    b.ToTable("InitiativeExpenditures", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeExpenditureBaseline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("HasDeleteRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpdateRequest")
                        .HasColumnType("bit");

                    b.Property<decimal>("InitialPlannedAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("Month")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ProjectId");

                    b.ToTable("InitiativeExpendituresBaseline", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeImpact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasDeleteRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpdateRequest")
                        .HasColumnType("bit");

                    b.Property<Guid>("InitiativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InitiativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("InitiativeId");

                    b.ToTable("InitiativeImpacts", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ClosedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EstimatedResolutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("HasDeleteRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpdateRequest")
                        .HasColumnType("bit");

                    b.Property<string>("ImpactDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImpactEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImpactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImpactStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InitiativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InitiativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("RaisedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RaisedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ScopeEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ScopeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScopeStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StatusEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImpactEnumId");

                    b.HasIndex("InitiativeId");

                    b.HasIndex("ScopeEnumId");

                    b.HasIndex("StatusEnumId");

                    b.ToTable("InitiativeIssues", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeMilestone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ActualFinish")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasDeleteRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpdateRequest")
                        .HasColumnType("bit");

                    b.Property<Guid>("InitiativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InitiativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("PlannedFinish")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SupportingDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("InitiativeId");

                    b.ToTable("InitiativeMilestones", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ActualBiddingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ActualContractingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Contracted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EstimatedAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("HasDeleteRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpdateRequest")
                        .HasColumnType("bit");

                    b.Property<Guid>("InitiativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InitiativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PhaseEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhaseStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("PlannedBiddingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("PlannedContractEndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("PlannedContractingDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique()
                        .HasFilter("[ContractId] IS NOT NULL");

                    b.HasIndex("InitiativeId");

                    b.HasIndex("PhaseEnumId");

                    b.ToTable("InitiativeProjects", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeProjectBaseline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("HasDeleteRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpdateRequest")
                        .HasColumnType("bit");

                    b.Property<decimal>("InitialEstimatedAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTimeOffset>("InitialPlannedContractingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("InitiativeProjectsBaseline", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeProjectProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasDeleteRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpdateRequest")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("PhaseEndedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PhaseEndedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("PhaseEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("PhaseStartedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PhaseStartedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhaseStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PhaseEnumId");

                    b.HasIndex("ProjectId");

                    b.ToTable("InitiativeProjectProgress", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeRisk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasDeleteRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpdateRequest")
                        .HasColumnType("bit");

                    b.Property<string>("ImpactDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImpactEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImpactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImpactStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InitiativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InitiativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PriorityEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriorityStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProbabilityEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProbabilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProbabilityStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RaisedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RaisedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsePlane")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ScopeEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ScopeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScopeStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TypeEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImpactEnumId");

                    b.HasIndex("InitiativeId");

                    b.HasIndex("PriorityEnumId");

                    b.HasIndex("ProbabilityEnumId");

                    b.HasIndex("ScopeEnumId");

                    b.HasIndex("TypeEnumId");

                    b.ToTable("InitiativeRisks", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasDeleteRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpdateRequest")
                        .HasColumnType("bit");

                    b.Property<Guid>("InitiativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InitiativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InitiativeId");

                    b.HasIndex("RoleEnumId");

                    b.ToTable("InitiativeTeams", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InvalidToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Jti")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InvalidTokens", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.KPIEntities.KPI", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("ActualProgress")
                        .HasColumnType("real");

                    b.Property<float?>("BaselineValue")
                        .HasColumnType("real");

                    b.Property<short?>("BaselineYear")
                        .HasColumnType("smallint");

                    b.Property<bool>("CalculateStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DataSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Frequency")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LatestAnalytics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LatestAnalyticsDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("LevelFourStrategicObjectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LevelFourStrategicObjectiveName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LevelOneStrategicObjectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LevelOneStrategicObjectiveName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LevelThreeStrategicObjectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LevelThreeStrategicObjectiveName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LevelTwoStrategicObjectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LevelTwoStrategicObjectiveName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasurementUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("PlannedProgress")
                        .HasColumnType("real");

                    b.Property<byte>("Polarity")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("StatusEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ValidationStatus")
                        .HasColumnType("tinyint");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.Property<bool>("VisibleOnDashboard")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("LevelThreeStrategicObjectiveId");

                    b.HasIndex("StatusEnumId");

                    b.ToTable("KPIs", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.KPIEntities.KPIValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ActualFinish")
                        .HasColumnType("datetimeoffset");

                    b.Property<float?>("ActualValue")
                        .HasColumnType("real");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasDeleteRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpdateRequest")
                        .HasColumnType("bit");

                    b.Property<Guid>("KPIId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KPIName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("MeasurementPeriod")
                        .HasColumnType("tinyint");

                    b.Property<string>("MeasurementUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("PlannedFinish")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("Polarity")
                        .HasColumnType("tinyint");

                    b.Property<float>("TargetValue")
                        .HasColumnType("real");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("KPIId");

                    b.ToTable("KPIValues", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.Portfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Portfolios", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.Program", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Programs", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d24a178-f873-4128-8f83-b6d3e469dfd4"),
                            ConcurrencyStamp = "6a629344-a0f8-4e90-9497-04c2456f283a",
                            LocalizedName = "مدير النظام",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("807bc649-a38a-4032-9a19-f43d22762dab"),
                            ConcurrencyStamp = "753277fa-a91b-4640-ab99-bf644cd2458e",
                            LocalizedName = "مشرف",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("30291ca4-9868-487f-bef5-be04948000a7"),
                            ConcurrencyStamp = "03cdffbd-5beb-4b75-a87e-bb028544227b",
                            LocalizedName = "مدقق بيانات",
                            Name = "DataAssurance",
                            NormalizedName = "DATAASSURANCE"
                        },
                        new
                        {
                            Id = new Guid("1d15a3d0-14eb-444c-8529-cdc0c20f157f"),
                            ConcurrencyStamp = "45c30276-41d9-45da-963d-40735bedc58d",
                            LocalizedName = "مسؤول مالي",
                            Name = "FinancialOperator",
                            NormalizedName = "FINANCIALOPERATOR"
                        },
                        new
                        {
                            Id = new Guid("98ed961b-df20-4ce7-ac25-467e5afbb213"),
                            ConcurrencyStamp = "a47627d6-1e89-4779-81e4-8b0f4c442d4f",
                            LocalizedName = "مسؤول تنفيذ",
                            Name = "ExecutionOperator",
                            NormalizedName = "EXECUTIONOPERATOR"
                        },
                        new
                        {
                            Id = new Guid("2d73ee2e-2156-42cb-b451-78bbdaa956af"),
                            ConcurrencyStamp = "e8f1f2bf-c0b0-4593-a515-356a1517737a",
                            LocalizedName = "مسؤول مؤشرات أداء",
                            Name = "KPIsOperator",
                            NormalizedName = "KPISOPERATOR"
                        },
                        new
                        {
                            Id = new Guid("e7bbf502-69c0-4e35-b544-67b359bcb0d5"),
                            ConcurrencyStamp = "e4ee20fc-9636-4a75-bf05-1f24298994ac",
                            LocalizedName = "مستخدم جهة",
                            Name = "EntityUser",
                            NormalizedName = "ENTITYUSER"
                        },
                        new
                        {
                            Id = new Guid("395365f8-b4c3-40cd-99ad-96cd4763ecde"),
                            ConcurrencyStamp = "dce382a9-e5b4-4aab-8b11-08a4d0449223",
                            LocalizedName = "مستعرض جميع البيانات",
                            Name = "FullAccessViewer",
                            NormalizedName = "FULLACCESSVIEWER"
                        });
                });

            modelBuilder.Entity("Moasher.Domain.Entities.Search", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<Guid>("RelativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SearchRecords", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.StrategicObjectiveEntities.StrategicObjective", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<HierarchyId>("HierarchyId")
                        .IsRequired()
                        .HasColumnType("hierarchyid");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StrategicObjectives", (string)null);
                });

            modelBuilder.Entity("Moasher.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Suspended")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moasher.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Moasher.Domain.Entities.Analytic", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.Initiative", "Initiative")
                        .WithMany("Analytics")
                        .HasForeignKey("InitiativeId");

                    b.HasOne("Moasher.Domain.Entities.KPIEntities.KPI", "KPI")
                        .WithMany("Analytics")
                        .HasForeignKey("KPIId");

                    b.Navigation("Initiative");

                    b.Navigation("KPI");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.EditRequests.EditRequestSnapshot", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.EditRequests.EditRequest", "EditRequest")
                        .WithMany("Snapshots")
                        .HasForeignKey("EditRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditRequest");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.Initiative", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.Entity", "Entity")
                        .WithMany("Initiatives")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moasher.Domain.Entities.EnumType", "FundStatusEnum")
                        .WithMany()
                        .HasForeignKey("FundStatusEnumId");

                    b.HasOne("Moasher.Domain.Entities.StrategicObjectiveEntities.StrategicObjective", "LevelThreeStrategicObjective")
                        .WithMany("Initiatives")
                        .HasForeignKey("LevelThreeStrategicObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moasher.Domain.Entities.Portfolio", "Portfolio")
                        .WithMany("Initiatives")
                        .HasForeignKey("PortfolioId");

                    b.HasOne("Moasher.Domain.Entities.Program", "Program")
                        .WithMany("Initiatives")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moasher.Domain.Entities.EnumType", "StatusEnum")
                        .WithMany()
                        .HasForeignKey("StatusEnumId");

                    b.Navigation("Entity");

                    b.Navigation("FundStatusEnum");

                    b.Navigation("LevelThreeStrategicObjective");

                    b.Navigation("Portfolio");

                    b.Navigation("Program");

                    b.Navigation("StatusEnum");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeApprovedCost", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.Initiative", "Initiative")
                        .WithMany("ApprovedCosts")
                        .HasForeignKey("InitiativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiative");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeBudget", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.Initiative", "Initiative")
                        .WithMany("Budgets")
                        .HasForeignKey("InitiativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiative");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeContract", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.Initiative", "Initiative")
                        .WithMany("Contracts")
                        .HasForeignKey("InitiativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moasher.Domain.Entities.EnumType", "StatusEnum")
                        .WithMany()
                        .HasForeignKey("StatusEnumId");

                    b.Navigation("Initiative");

                    b.Navigation("StatusEnum");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeDeliverable", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.Initiative", "Initiative")
                        .WithMany("Deliverables")
                        .HasForeignKey("InitiativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiative");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeExpenditure", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.InitiativeContract", "Contract")
                        .WithMany("Expenditures")
                        .HasForeignKey("ContractId");

                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.InitiativeProject", "Project")
                        .WithMany("Expenditures")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Contract");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeExpenditureBaseline", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.InitiativeContract", "Contract")
                        .WithMany("ExpendituresBaseline")
                        .HasForeignKey("ContractId");

                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.InitiativeProject", "Project")
                        .WithMany("ExpendituresBaseline")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Contract");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeImpact", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.Initiative", "Initiative")
                        .WithMany("Impacts")
                        .HasForeignKey("InitiativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiative");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeIssue", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.EnumType", "ImpactEnum")
                        .WithMany()
                        .HasForeignKey("ImpactEnumId");

                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.Initiative", "Initiative")
                        .WithMany("Issues")
                        .HasForeignKey("InitiativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moasher.Domain.Entities.EnumType", "ScopeEnum")
                        .WithMany()
                        .HasForeignKey("ScopeEnumId");

                    b.HasOne("Moasher.Domain.Entities.EnumType", "StatusEnum")
                        .WithMany()
                        .HasForeignKey("StatusEnumId");

                    b.Navigation("ImpactEnum");

                    b.Navigation("Initiative");

                    b.Navigation("ScopeEnum");

                    b.Navigation("StatusEnum");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeMilestone", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.Initiative", "Initiative")
                        .WithMany("Milestones")
                        .HasForeignKey("InitiativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiative");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeProject", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.InitiativeContract", "Contract")
                        .WithOne("Project")
                        .HasForeignKey("Moasher.Domain.Entities.InitiativeEntities.InitiativeProject", "ContractId");

                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.Initiative", "Initiative")
                        .WithMany("Projects")
                        .HasForeignKey("InitiativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moasher.Domain.Entities.EnumType", "PhaseEnum")
                        .WithMany()
                        .HasForeignKey("PhaseEnumId");

                    b.Navigation("Contract");

                    b.Navigation("Initiative");

                    b.Navigation("PhaseEnum");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeProjectBaseline", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.InitiativeProject", "Project")
                        .WithOne("Baseline")
                        .HasForeignKey("Moasher.Domain.Entities.InitiativeEntities.InitiativeProjectBaseline", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeProjectProgress", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.EnumType", "PhaseEnum")
                        .WithMany()
                        .HasForeignKey("PhaseEnumId");

                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.InitiativeProject", "Project")
                        .WithMany("Progress")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhaseEnum");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeRisk", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.EnumType", "ImpactEnum")
                        .WithMany()
                        .HasForeignKey("ImpactEnumId");

                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.Initiative", "Initiative")
                        .WithMany("Risks")
                        .HasForeignKey("InitiativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moasher.Domain.Entities.EnumType", "PriorityEnum")
                        .WithMany()
                        .HasForeignKey("PriorityEnumId");

                    b.HasOne("Moasher.Domain.Entities.EnumType", "ProbabilityEnum")
                        .WithMany()
                        .HasForeignKey("ProbabilityEnumId");

                    b.HasOne("Moasher.Domain.Entities.EnumType", "ScopeEnum")
                        .WithMany()
                        .HasForeignKey("ScopeEnumId");

                    b.HasOne("Moasher.Domain.Entities.EnumType", "TypeEnum")
                        .WithMany()
                        .HasForeignKey("TypeEnumId");

                    b.Navigation("ImpactEnum");

                    b.Navigation("Initiative");

                    b.Navigation("PriorityEnum");

                    b.Navigation("ProbabilityEnum");

                    b.Navigation("ScopeEnum");

                    b.Navigation("TypeEnum");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeTeam", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.InitiativeEntities.Initiative", "Initiative")
                        .WithMany("Teams")
                        .HasForeignKey("InitiativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moasher.Domain.Entities.EnumType", "RoleEnum")
                        .WithMany()
                        .HasForeignKey("RoleEnumId");

                    b.Navigation("Initiative");

                    b.Navigation("RoleEnum");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.KPIEntities.KPI", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.Entity", "Entity")
                        .WithMany("KPIs")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moasher.Domain.Entities.StrategicObjectiveEntities.StrategicObjective", "LevelThreeStrategicObjective")
                        .WithMany("KPIs")
                        .HasForeignKey("LevelThreeStrategicObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moasher.Domain.Entities.EnumType", "StatusEnum")
                        .WithMany()
                        .HasForeignKey("StatusEnumId");

                    b.Navigation("Entity");

                    b.Navigation("LevelThreeStrategicObjective");

                    b.Navigation("StatusEnum");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.KPIEntities.KPIValue", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.KPIEntities.KPI", "KPI")
                        .WithMany("Values")
                        .HasForeignKey("KPIId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KPI");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.User", b =>
                {
                    b.HasOne("Moasher.Domain.Entities.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.EditRequests.EditRequest", b =>
                {
                    b.Navigation("Snapshots");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.Entity", b =>
                {
                    b.Navigation("Initiatives");

                    b.Navigation("KPIs");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.Initiative", b =>
                {
                    b.Navigation("Analytics");

                    b.Navigation("ApprovedCosts");

                    b.Navigation("Budgets");

                    b.Navigation("Contracts");

                    b.Navigation("Deliverables");

                    b.Navigation("Impacts");

                    b.Navigation("Issues");

                    b.Navigation("Milestones");

                    b.Navigation("Projects");

                    b.Navigation("Risks");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeContract", b =>
                {
                    b.Navigation("Expenditures");

                    b.Navigation("ExpendituresBaseline");

                    b.Navigation("Project")
                        .IsRequired();
                });

            modelBuilder.Entity("Moasher.Domain.Entities.InitiativeEntities.InitiativeProject", b =>
                {
                    b.Navigation("Baseline")
                        .IsRequired();

                    b.Navigation("Expenditures");

                    b.Navigation("ExpendituresBaseline");

                    b.Navigation("Progress");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.KPIEntities.KPI", b =>
                {
                    b.Navigation("Analytics");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.Portfolio", b =>
                {
                    b.Navigation("Initiatives");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.Program", b =>
                {
                    b.Navigation("Initiatives");
                });

            modelBuilder.Entity("Moasher.Domain.Entities.StrategicObjectiveEntities.StrategicObjective", b =>
                {
                    b.Navigation("Initiatives");

                    b.Navigation("KPIs");
                });
#pragma warning restore 612, 618
        }
    }
}
